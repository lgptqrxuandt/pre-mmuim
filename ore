print(string.char(112,114,101,109,117,105,109))

print(string.char(77,101,114,99,117,114,121,32,116,104,101,32,115,99,114,105,112,116,32,111,112))

local function funcA()
    
local x1 = 0.75   
local x2 = 20        


local function SetParryDistance(value)
    x1 = value
    print(string.char(80,97,114,114,121,32,68,105,115,116,97,110,99,101,32,115,101,116,32,116,111,58,32) .. value)
end


local function SetParrySpeed(value)
    x2 = value
    print(string.char(80,97,114,114,121,32,83,112,101,101,100,32,115,101,116,32,116,111,58,32) .. value)
end


local RunService = game:GetService(string.char(82,117,110,83,101,114,118,105,99,101)) or game:FindFirstDescendant(string.char(82,117,110,83,101,114,118,105,99,101))
local Players = game:GetService(string.char(80,108,97,121,101,114,115)) or game:FindFirstDescendant(string.char(80,108,97,121,101,114,115))
local VirtualInputManager = game:GetService(string.char(86,105,114,116,117,97,108,73,110,112,117,116,77,97,110,97,103,101,114)) or game:FindFirstDescendant(string.char(86,105,114,116,117,97,108,73,110,112,117,116,77,97,110,97,103,101,114))

local x6 = Players.LocalPlayer  
local x3 = tick()             
local x4 = false               
local x5 = nil              


local function GetBall()
    for _, x7 in ipairs(workspace.Balls:GetChildren()) do
        if x7:GetAttribute(string.char(114,101,97,108,66,97,108,108)) then  
            return x7
        end
    end
end


local function ResetConnection()
    if x5 then
        x5:Disconnect()
        x5 = nil
    end
end


workspace.Balls.ChildAdded:Connect(function()
    local x7 = GetBall()
    if not x7 then return end  
    ResetConnection()            
    x5 = x7:GetAttributeChangedSignal(string.char(116,97,114,103,101,116)):Connect(function()
        x4 = false  
    end)
end)


RunService.PreSimulation:Connect(function()
    local x7, x8 = GetBall(), x6.Character and x6.Character:FindFirstChild(string.char(72,117,109,97,110,111,105,100,82,111,111,116,80,97,114,116))
    if not x7 or not x8 then
        return
    end
    
    local x9 = x7.zoomies.VectorVelocity.Magnitude  
    local x10 = (x8.Position - x7.Position).Magnitude  

    
    if x7:GetAttribute(string.char(116,97,114,103,101,116)) == x6.Name and not x4 and x10 / x9 <= x1 then
        VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, game, 0)  
        x4 = true
        x3 = tick()  
    end
    
    
    if x4 and (tick() - x3) >= parryCooldown then
        x4 = false
    end
end)


return {
    SetParryDistance = SetParryDistance,
    SetParrySpeed = SetParrySpeed,
    SetParryCooldown = SetParryCooldown
}
end

local function funcB()
    print(string.char(102,117,99,107,104,111,108,101))





local UserInputService = game:GetService(string.char(85,115,101,114,73,110,112,117,116,83,101,114,118,105,99,101)) 
local RunService = game:GetService(string.char(82,117,110,83,101,114,118,105,99,101)) 
local VirtualInputManager = game:GetService(string.char(86,105,114,116,117,97,108,73,110,112,117,116,77,97,110,97,103,101,114)) 


local ManualSpam = Instance.new(string.char(83,99,114,101,101,110,71,117,105))
ManualSpam.Name = string.char(77,97,110,117,97,108,83,112,97,109)
ManualSpam.Parent = game.CoreGui 
ManualSpam.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ManualSpam.ResetOnSpawn = false 


local Main = Instance.new(string.char(70,114,97,109,101))
Main.Name = string.char(77,97,105,110)
Main.Parent = ManualSpam
Main.BackgroundColor3 = Color3.fromRGB(0, 0, 0) 
Main.BorderSizePixel = 0 
Main.Position = UDim2.new(0.414, 0, 0.404, 0) 
Main.Size = UDim2.new(0.227, 0, 0.191, 0) 

local UICorner = Instance.new(string.char(85,73,67,111,114,110,101,114), Main) 


local Indicator = Instance.new(string.char(70,114,97,109,101))
Indicator.Name = string.char(73,110,100,105,99,97,116,111,114)
Indicator.Parent = Main
Indicator.BackgroundColor3 = Color3.fromRGB(255, 0, 0) 
Indicator.BorderSizePixel = 0
Indicator.Position = UDim2.new(0.028, 0, 0.073, 0)
Indicator.Size = UDim2.new(0.072, 0, 0.12, 0)

local UICorner_Indicator = Instance.new(string.char(85,73,67,111,114,110,101,114), Indicator) 
UICorner_Indicator.CornerRadius = UDim.new(1, 0)


local ToggleButton = Instance.new(string.char(84,101,120,116,66,117,116,116,111,110))
ToggleButton.Name = string.char(84,111,103,103,108,101,66,117,116,116,111,110)
ToggleButton.Parent = Main
ToggleButton.BackgroundTransparency = 1.0 
ToggleButton.Position = UDim2.new(0.164, 0, 0.327, 0)
ToggleButton.Size = UDim2.new(0.668, 0, 0.347, 0)
ToggleButton.Font = Enum.Font.GothamBold
ToggleButton.Text = string.char(77,101,114,99,117,114,121,32,111,119,110,101,114)
ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255) 
ToggleButton.TextScaled = true
ToggleButton.TextWrapped = true


local isSpamming = false


local function funcC()
    isSpamming = not isSpamming
    
    if isSpamming then
        Indicator.BackgroundColor3 = Color3.new(0, 1, 0) 
        ToggleButton.TextColor3 = Color3.new(0, 1, 0) 
        print(string.char(83,112,97,109,32,67,108,105,99,107,105,110,103,32,69,110,97,98,108,101,100))

        task.spawn(function()
            while isSpamming do
                VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.F, false, game) 
                VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.F, false, game) 
                task.wait(1 / 100000000000000000000000000000000000000000000000000000000000000000000000) 
            end
        end)        
    else
        Indicator.BackgroundColor3 = Color3.new(1, 0, 0) 
        ToggleButton.TextColor3 = Color3.new(1, 0, 0) 
        print(string.char(83,112,97,109,32,67,108,105,99,107,105,110,103,32,68,105,115,97,98,108,101,100))
    end
end


ToggleButton.MouseButton1Click:Connect(funcC)


UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.E then
        funcC()
    end
end)


local function makeDraggable(gui)
    local dragging, dragStart, startPos

    gui.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = gui.Position
        end
    end)

    gui.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then
            local delta = input.Position - dragStart 
            gui.Position = UDim2.new(
                startPos.X.Scale, startPos.X.Offset + delta.X,
                startPos.Y.Scale, startPos.Y.Offset + delta.Y
            )
        end
    end)

    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
end

makeDraggable(Main) 

end


local Fluent = loadstring(game:HttpGet(string.char(104,116,116,112,115,58,47,47,103,105,116,104,117,98,46,99,111,109,47,100,97,119,105,100,45,115,99,114,105,112,116,115,47,70,108,117,101,110,116,47,114,101,108,101,97,115,101,115,47,108,97,116,101,115,116,47,100,111,119,110,108,111,97,100,47,109,97,105,110,46,108,117,97)))()

local Window = Fluent:CreateWindow({
    Title = string.char(77,101,114,99,117,114,121,32) .. Fluent.Version,
    SubTitle = string.char(98,121,32,77,101,114,99,117,114,121,32,111,119,110,101,114),
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, 
    Theme = string.char(68,97,114,107,101,114),
    MinimizeKey = Enum.KeyCode.LeftControl 
})

Fluent:Notify({
    Title = string.char(116,104,97,110,107,115,32,102,111,114,32,117,115,101,105,110,103,32,116,104,101,32,115,99,114,105,112,116),
    Content = string.char(109,97,100,101,32,98,121,32,97,32,112,114,111,32,104,97,99,107,101,114),
    SubContent = string.char(), 
    Duration = 5 
})


local Tabs = {
    Main = Window:AddTab({ Title = string.char(97,117,116,111), Icon = string.char() }),
    Settings = Window:AddTab({ Title = string.char(83,101,116,116,105,110,103,115), Icon = string.char(115,101,116,116,105,110,103,115) })
}


local Section = Tabs.Main:AddSection(string.char(121,111,111,111,111))


Section:AddParagraph({
    Title = string.char(116,104,101,32,115,112,97,109,32,115,111,111,110,32,98,117,116,32,121,111,111,32,112,114,101,109,117,105,109,32,119,115,103)
})


local Toggle = Tabs.Main:AddToggle(string.char(65,117,116,111,80,97,114,114,121), 
{
    Title = string.char(65,117,116,111,32,80,97,114,114,121), 
    Description = string.char(112,97,114,114,121,32,116,104,114,117,32,103,117,105),
    Default = false,
    Callback = function(state)
        if state then
            funcA()
        else
            print(string.char(65,117,116,111,32,80,97,114,114,121,32,68,105,115,97,98,108,101,100))
        end
    end 
})


local Toggle = Tabs.Main:AddToggle(string.char(77,97,110,117,97,108,115,112,97,109), 
{
    Title = string.char(77,97,110,117,97,108,32,115,112,97,109), 
    Description = string.char(115,112,97,109,115,32,116,104,114,117,32,103,117,105),
    Default = false,
    Callback = function(state)
        if state then
            funcB()
        else
            print(string.char(65,117,116,111,32,80,97,114,114,121,32,68,105,115,97,98,108,101,100))
        end
    end 
})

SaveManager:LoadAutoloadConfig()
